1.初始化仓库：git init
2. 往仓库中添加文件：
	git add <filename>	//将文件修改添加到暂存区
	git commit -m "文件说明"	//将暂存区中的所有内容提交到当前分支
	
3. 查看仓库状态：git status
4. 比较文件的不同，或者查看文件修改的地方：
	git diff <filename>
	
5. 版本回退
	查看历史记录：git log
	查看精简的历史记录：git log --pretty=oneline
	查看输入命令的记录：git reflog
	版本表示：当前版本表示为HEAD，上一个版本表示为HEAD^，上上个版本表示为HEAD^^
				上100个版本可以表示为HEAD~100
	版本回退：git reset --hard <版本id>  举例：git reset --hard HEAD^ //表示返回到上一个版本；
	
6. 查看某一文件的内容：Linux命令，如 cat ，more等；
7. Git的工作区和暂存区
	（1）工作区（Working Direction）：所编辑的文件所在的目录；
	（2）版本库（Repository）：工作区文件夹中的.git文件夹；
	方式：git add <filename> 将文件修改信息从工作区添加到暂存区；
		  git commit -m "说明" 将暂存区的信息添加到分支；
8. Git跟踪的文件的修改而不是文件本身：每次修改如果不add到暂存区，那么当commit提交时就不会添加到分支中。
9. 撤销修改：
	命令：git checkout -- <文件名> 如：git checkout -- readme.txt 
	（1）当文件自修改后还没有被add到暂存区，则撤销修改就会使文件回到与版本库分支中的文件一模一样；
	（2）当文件已经add到暂存区，又作了修改，则插销修改就会回到与暂存区中的文件一样；
	注：此命令中的 -- 一定要有，如果没有 -- 就变成创建一个新的分支；
	
	当修改已经add到暂存区，此时想要撤销修改时，就需要先将暂存区的修改回退到工作区，然后再工作区撤销修改；
	命令：git reset HEAD <文件名>
		  git checkout -- <文件名>
		如：git reset HEAD readme.txt
			git checkout -- readme.txt
			
	当已经提交到版本库，想撤销修改时，就需要进行版本回退。
10. 删除文件：
	（1）若文件已经提交到版本库，从版本库中删除文件：git rm <文件名>
	（2）若文件添加到暂存区，从暂存区中删除文件：git rm -f <文件名>
	（3）若在工作区删除了文件，但文件已添加到暂存区或者提交到版本库中，在工作区中恢复文件：git checkout -- <文件名>
11. 创建SSH Key：ssh-keygen -t rsa -C "youremail@example.com"
	生成.ssh文件，其中id_rsa为私钥，id_rsa.pub为公钥。
	将id_rsa.pub中的公钥添加到gitHub.com中。
12. 将工程合并到github.com上：在github上创建项目，然后根据提示绑定；
	首先，关联一个远程库：
	git remote add origin http://github.com/Username/Projectname.git 或者 
	git remote add origin git@github.com:path/repo-name.git
	然后，推送到远程库中：git push -u origin master    //第一次推送master中的所有内容；
	此后，若本地版本修改之后，只需要通过git push origin master命令就可以合并到github.com中。	
13. 将仓库项目克隆到本地：git clone git@github.com:path/repo-name.git
14. 创建分之
	（1）创建分支：git checkout -b <分支名称>
	其中，参数-b相当于两条命令：创建并切换：git branch <分支名称>，git checkout <分支名称>；
	如：git checkout -b dev
	（2）查看当前分支：git branch //列出所有分支，并在当前分支前显示一个*；
	（3）分支切换：git checkout <分支名称>//
	（4）分支合并：git merge <分支名称>	//将指定分支合并到当前分支上
	（5）删除分支：git branch -d <分支名称>	//删除指定分支